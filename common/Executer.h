/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Executer_H
#define Executer_H

#include <thrift/TDispatchProcessor.h>
#include "calcute_server_types.h"



class ExecuterIf {
 public:
  virtual ~ExecuterIf() {}
  virtual bool add_measure_group(const std::string& str_addr, const int32_t interval) = 0;
  virtual bool del_measure_group(const std::string& str_addr, const int32_t interval) = 0;
};

class ExecuterIfFactory {
 public:
  typedef ExecuterIf Handler;

  virtual ~ExecuterIfFactory() {}

  virtual ExecuterIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ExecuterIf* /* handler */) = 0;
};

class ExecuterIfSingletonFactory : virtual public ExecuterIfFactory {
 public:
  ExecuterIfSingletonFactory(const boost::shared_ptr<ExecuterIf>& iface) : iface_(iface) {}
  virtual ~ExecuterIfSingletonFactory() {}

  virtual ExecuterIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ExecuterIf* /* handler */) {}

 protected:
  boost::shared_ptr<ExecuterIf> iface_;
};

class ExecuterNull : virtual public ExecuterIf {
 public:
  virtual ~ExecuterNull() {}
  bool add_measure_group(const std::string& /* str_addr */, const int32_t /* interval */) {
    bool _return = false;
    return _return;
  }
  bool del_measure_group(const std::string& /* str_addr */, const int32_t /* interval */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _Executer_add_measure_group_args__isset {
  _Executer_add_measure_group_args__isset() : str_addr(false), interval(false) {}
  bool str_addr;
  bool interval;
} _Executer_add_measure_group_args__isset;

class Executer_add_measure_group_args {
 public:

  Executer_add_measure_group_args() : str_addr(), interval(0) {
  }

  virtual ~Executer_add_measure_group_args() throw() {}

  std::string str_addr;
  int32_t interval;

  _Executer_add_measure_group_args__isset __isset;

  void __set_str_addr(const std::string& val) {
    str_addr = val;
  }

  void __set_interval(const int32_t val) {
    interval = val;
  }

  bool operator == (const Executer_add_measure_group_args & rhs) const
  {
    if (!(str_addr == rhs.str_addr))
      return false;
    if (!(interval == rhs.interval))
      return false;
    return true;
  }
  bool operator != (const Executer_add_measure_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Executer_add_measure_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Executer_add_measure_group_pargs {
 public:


  virtual ~Executer_add_measure_group_pargs() throw() {}

  const std::string* str_addr;
  const int32_t* interval;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Executer_add_measure_group_result__isset {
  _Executer_add_measure_group_result__isset() : success(false) {}
  bool success;
} _Executer_add_measure_group_result__isset;

class Executer_add_measure_group_result {
 public:

  Executer_add_measure_group_result() : success(0) {
  }

  virtual ~Executer_add_measure_group_result() throw() {}

  bool success;

  _Executer_add_measure_group_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Executer_add_measure_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Executer_add_measure_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Executer_add_measure_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Executer_add_measure_group_presult__isset {
  _Executer_add_measure_group_presult__isset() : success(false) {}
  bool success;
} _Executer_add_measure_group_presult__isset;

class Executer_add_measure_group_presult {
 public:


  virtual ~Executer_add_measure_group_presult() throw() {}

  bool* success;

  _Executer_add_measure_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Executer_del_measure_group_args__isset {
  _Executer_del_measure_group_args__isset() : str_addr(false), interval(false) {}
  bool str_addr;
  bool interval;
} _Executer_del_measure_group_args__isset;

class Executer_del_measure_group_args {
 public:

  Executer_del_measure_group_args() : str_addr(), interval(0) {
  }

  virtual ~Executer_del_measure_group_args() throw() {}

  std::string str_addr;
  int32_t interval;

  _Executer_del_measure_group_args__isset __isset;

  void __set_str_addr(const std::string& val) {
    str_addr = val;
  }

  void __set_interval(const int32_t val) {
    interval = val;
  }

  bool operator == (const Executer_del_measure_group_args & rhs) const
  {
    if (!(str_addr == rhs.str_addr))
      return false;
    if (!(interval == rhs.interval))
      return false;
    return true;
  }
  bool operator != (const Executer_del_measure_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Executer_del_measure_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Executer_del_measure_group_pargs {
 public:


  virtual ~Executer_del_measure_group_pargs() throw() {}

  const std::string* str_addr;
  const int32_t* interval;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Executer_del_measure_group_result__isset {
  _Executer_del_measure_group_result__isset() : success(false) {}
  bool success;
} _Executer_del_measure_group_result__isset;

class Executer_del_measure_group_result {
 public:

  Executer_del_measure_group_result() : success(0) {
  }

  virtual ~Executer_del_measure_group_result() throw() {}

  bool success;

  _Executer_del_measure_group_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Executer_del_measure_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Executer_del_measure_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Executer_del_measure_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Executer_del_measure_group_presult__isset {
  _Executer_del_measure_group_presult__isset() : success(false) {}
  bool success;
} _Executer_del_measure_group_presult__isset;

class Executer_del_measure_group_presult {
 public:


  virtual ~Executer_del_measure_group_presult() throw() {}

  bool* success;

  _Executer_del_measure_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ExecuterClient : virtual public ExecuterIf {
 public:
  ExecuterClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ExecuterClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool add_measure_group(const std::string& str_addr, const int32_t interval);
  void send_add_measure_group(const std::string& str_addr, const int32_t interval);
  bool recv_add_measure_group();
  bool del_measure_group(const std::string& str_addr, const int32_t interval);
  void send_del_measure_group(const std::string& str_addr, const int32_t interval);
  bool recv_del_measure_group();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ExecuterProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ExecuterIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ExecuterProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add_measure_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_del_measure_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ExecuterProcessor(boost::shared_ptr<ExecuterIf> iface) :
    iface_(iface) {
    processMap_["add_measure_group"] = &ExecuterProcessor::process_add_measure_group;
    processMap_["del_measure_group"] = &ExecuterProcessor::process_del_measure_group;
  }

  virtual ~ExecuterProcessor() {}
};

class ExecuterProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ExecuterProcessorFactory(const ::boost::shared_ptr< ExecuterIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ExecuterIfFactory > handlerFactory_;
};

class ExecuterMultiface : virtual public ExecuterIf {
 public:
  ExecuterMultiface(std::vector<boost::shared_ptr<ExecuterIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ExecuterMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ExecuterIf> > ifaces_;
  ExecuterMultiface() {}
  void add(boost::shared_ptr<ExecuterIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool add_measure_group(const std::string& str_addr, const int32_t interval) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_measure_group(str_addr, interval);
    }
    return ifaces_[i]->add_measure_group(str_addr, interval);
  }

  bool del_measure_group(const std::string& str_addr, const int32_t interval) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->del_measure_group(str_addr, interval);
    }
    return ifaces_[i]->del_measure_group(str_addr, interval);
  }

};



#endif
