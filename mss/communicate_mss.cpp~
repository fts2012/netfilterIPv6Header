// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

/**
 * Executer is work on MSS which tell the source to execute some commands.
 * 1. accept command from mcs
 * 2. pass command to the kernel
 */

#include "../common/Executer.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include "com_kernel_mss.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;


class ExecuterHandler : virtual public ExecuterIf {
 public:
  ExecuterHandler() {
    // Your initialization goes here
  }

  bool add_measure_group(const std::string& str_addr,const int32_t interval) {

    string str = string("cmd=add&ip=") + str_addr + string("&interval=") + interval;//?
   
    int rtn = send_msg_to_kernel(str.c_str());
    
    return rtn;
  }

  bool del_measure_group(const std::string& str_addr,const int32_t interval) {
    // Your implementation goes here

    string str = string("cmd=del&ip=") + str_addr + string("&interval=") + interval;//?
   
    int rtn = send_msg_to_kernel(str.c_str());
    
    return rtn;
  }


};

// http://mail-archives.apache.org/mod_mbox/incubator-thrift-user/200905.mbox/%3C79457101792928636947652638746352105373-Webmail@me.com%3E
// Error"<Host: ::ffff:121.248.29.109 Port: 54804>Connection reset by peer" will occur
//2012.2.25 no solution now, but it won't affect the process

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ExecuterHandler> handler(new ExecuterHandler());
  shared_ptr<TProcessor> processor(new ExecuterProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  printf("Starting the server...\n");
  server.serve();
  printf("done.\n");
  return 0;
}

