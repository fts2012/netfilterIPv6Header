/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef deal_message_TYPES_H
#define deal_message_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>





typedef struct _Device__isset {
  _Device__isset() : name(false), deviceIp(false), deviceType(false), relateIp(false), listenPort(false) {}
  bool name;
  bool deviceIp;
  bool deviceType;
  bool relateIp;
  bool listenPort;
} _Device__isset;

class Device {
 public:

  static const char* ascii_fingerprint; // = "EB88F56DA53C89F3E4C84007BA48D308";
  static const uint8_t binary_fingerprint[16]; // = {0xEB,0x88,0xF5,0x6D,0xA5,0x3C,0x89,0xF3,0xE4,0xC8,0x40,0x07,0xBA,0x48,0xD3,0x08};

  Device() : name(), deviceIp(), deviceType(0), relateIp(), listenPort(0) {
  }

  virtual ~Device() throw() {}

  std::string name;
  std::string deviceIp;
  int32_t deviceType;
  std::string relateIp;
  int32_t listenPort;

  _Device__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_deviceIp(const std::string& val) {
    deviceIp = val;
  }

  void __set_deviceType(const int32_t val) {
    deviceType = val;
  }

  void __set_relateIp(const std::string& val) {
    relateIp = val;
  }

  void __set_listenPort(const int32_t val) {
    listenPort = val;
  }

  bool operator == (const Device & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(deviceIp == rhs.deviceIp))
      return false;
    if (!(deviceType == rhs.deviceType))
      return false;
    if (!(relateIp == rhs.relateIp))
      return false;
    if (!(listenPort == rhs.listenPort))
      return false;
    return true;
  }
  bool operator != (const Device &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Device & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Device &a, Device &b);

typedef struct _Group__isset {
  _Group__isset() : name(false), deviceIp(false), groupIp(false), groupport(false) {}
  bool name;
  bool deviceIp;
  bool groupIp;
  bool groupport;
} _Group__isset;

class Group {
 public:

  static const char* ascii_fingerprint; // = "194A357BC9EE908DC4763D0A5147760A";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0x4A,0x35,0x7B,0xC9,0xEE,0x90,0x8D,0xC4,0x76,0x3D,0x0A,0x51,0x47,0x76,0x0A};

  Group() : name(), deviceIp(), groupIp(), groupport(0) {
  }

  virtual ~Group() throw() {}

  std::string name;
  std::string deviceIp;
  std::string groupIp;
  int32_t groupport;

  _Group__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_deviceIp(const std::string& val) {
    deviceIp = val;
  }

  void __set_groupIp(const std::string& val) {
    groupIp = val;
  }

  void __set_groupport(const int32_t val) {
    groupport = val;
  }

  bool operator == (const Group & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(deviceIp == rhs.deviceIp))
      return false;
    if (!(groupIp == rhs.groupIp))
      return false;
    if (!(groupport == rhs.groupport))
      return false;
    return true;
  }
  bool operator != (const Group &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Group & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Group &a, Group &b);



#endif
