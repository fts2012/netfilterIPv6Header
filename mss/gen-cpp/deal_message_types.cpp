/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "deal_message_types.h"

#include <algorithm>



const char* Device::ascii_fingerprint = "EB88F56DA53C89F3E4C84007BA48D308";
const uint8_t Device::binary_fingerprint[16] = {0xEB,0x88,0xF5,0x6D,0xA5,0x3C,0x89,0xF3,0xE4,0xC8,0x40,0x07,0xBA,0x48,0xD3,0x08};

uint32_t Device::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deviceIp);
          this->__isset.deviceIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->deviceType);
          this->__isset.deviceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->relateIp);
          this->__isset.relateIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->listenPort);
          this->__isset.listenPort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Device::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Device");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deviceIp", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->deviceIp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deviceType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->deviceType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relateIp", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->relateIp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("listenPort", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->listenPort);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Device &a, Device &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.deviceIp, b.deviceIp);
  swap(a.deviceType, b.deviceType);
  swap(a.relateIp, b.relateIp);
  swap(a.listenPort, b.listenPort);
  swap(a.__isset, b.__isset);
}

const char* Group::ascii_fingerprint = "AB879940BD15B6B25691265F7384B271";
const uint8_t Group::binary_fingerprint[16] = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

uint32_t Group::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deviceIp);
          this->__isset.deviceIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->groupIp);
          this->__isset.groupIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Group::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Group");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deviceIp", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->deviceIp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groupIp", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->groupIp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Group &a, Group &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.deviceIp, b.deviceIp);
  swap(a.groupIp, b.groupIp);
  swap(a.__isset, b.__isset);
}


