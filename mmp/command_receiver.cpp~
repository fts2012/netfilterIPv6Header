/**
 * work as a server to receive the command of add or delete ip rule
 */

#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/PosixThreadFactory.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/server/TThreadPoolServer.h>
#include <thrift/server/TThreadedServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TTransportUtils.h>

#include <iostream>
#include <stdexcept>
#include <sstream>
#include <string>
#include "common.h"
#include <pthread.h>


#include "./gen-cpp/RecvCommand.h"

using namespace std;
using namespace apache::thrift;
using namespace apache::thrift::protocol;
using namespace apache::thrift::transport;
using namespace apache::thrift::server;

using namespace boost;

class RecvCommandHandler : public RecvCommandIf {
 public:
  RecvCommandHandler(int shmid) {
        shm_id = shmid;
    }

  bool add_measure_group(const std::string addr, const int32_t interval, const int32_t port) {
    cout<<"add rule"<<addr<<endl;
    struct in6_addr s; // IPv6地址结构体
    inet_pton(AF_INET6, addr, (void *)&s);
    //join the group

    //add it to the rule
    add_rule(shm_id, &s);
    return true;
  }
  
  bool del_measure_group(const std::string addr, const int32_t interval, const int32_t port) {
    cout<<"del rule"<<addr<<endl;
    struct in6_addr s; // IPv6地址结构体
    inet_pton(AF_INET6, addr, (void *)&s);
    del_rule(shm_id, &s);
    return true;
  }


protected:
  map<int32_t, SharedStruct> log;

private:
    int shm_id;  //share memory id

};

int main(int argc, char **argv) {

    char file_shm[20];
    int size_of_shm;
    int port;
    Config cfg;
    // Read the file. If there is an error, report it and exit.
      try
      {
        cfg.readFile("mmp_ini.cfg");
      }
      catch(const FileIOException &fioex)
      {
        std::cerr << "I/O error while reading file." << std::endl;
        return(EXIT_FAILURE);
      }
      catch(const ParseException &pex)
      {
        std::cerr << "Parse error at " << pex.getFile() << ":" << pex.getLine()
                  << " - " << pex.getError() << std::endl;
        return(EXIT_FAILURE);
      }
     try
      {
        file_shm = cfg.lookup("file_shm").toCharArray();
        size_of_shm = cfg.lookup("size_of_shm").toCharArray();
        port = cfg.lookup("mcs_port");
      }
      catch(const SettingNotFoundException &nfex)
      {
        cerr << "No 'name' setting in configuration file." << endl;
      }

    //create share memory
    int shm_id = create_shm(file_shm, size_of_shm);
    if(shm_id == 0)
        return 0;
        
  //server single connect with mcs
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
  shared_ptr<RecvCommandHandler> handler(new RecvCommandHandler(shm_id));
  shared_ptr<TProcessor> processor(new RecvCommandProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());

  TSimpleServer server(processor,
                       serverTransport,
                       transportFactory,
                       protocolFactory);


  /**
   * Or you could do one of these

  shared_ptr<ThreadManager> threadManager =
    ThreadManager::newSimpleThreadManager(workerCount);
  shared_ptr<PosixThreadFactory> threadFactory =
    shared_ptr<PosixThreadFactory>(new PosixThreadFactory());
  threadManager->threadFactory(threadFactory);
  threadManager->start();
  TThreadPoolServer server(processor,
                           serverTransport,
                           transportFactory,
                           protocolFactory,
                           threadManager);

  TThreadedServer server(processor,
                         serverTransport,
                         transportFactory,
                         protocolFactory);

  */

  printf("Starting the server...\n");
  server.serve();
  printf("done.\n");
  return 0;
}
