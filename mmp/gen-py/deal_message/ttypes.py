#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Device:
  """
  Attributes:
   - name
   - deviceIp
   - deviceType
   - relateIp
   - listenPort
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'deviceIp', None, None, ), # 2
    (3, TType.I32, 'deviceType', None, None, ), # 3
    (4, TType.STRING, 'relateIp', None, None, ), # 4
    (5, TType.I32, 'listenPort', None, None, ), # 5
  )

  def __init__(self, name=None, deviceIp=None, deviceType=None, relateIp=None, listenPort=None,):
    self.name = name
    self.deviceIp = deviceIp
    self.deviceType = deviceType
    self.relateIp = relateIp
    self.listenPort = listenPort

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.deviceIp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.deviceType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.relateIp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.listenPort = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Device')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.deviceIp is not None:
      oprot.writeFieldBegin('deviceIp', TType.STRING, 2)
      oprot.writeString(self.deviceIp)
      oprot.writeFieldEnd()
    if self.deviceType is not None:
      oprot.writeFieldBegin('deviceType', TType.I32, 3)
      oprot.writeI32(self.deviceType)
      oprot.writeFieldEnd()
    if self.relateIp is not None:
      oprot.writeFieldBegin('relateIp', TType.STRING, 4)
      oprot.writeString(self.relateIp)
      oprot.writeFieldEnd()
    if self.listenPort is not None:
      oprot.writeFieldBegin('listenPort', TType.I32, 5)
      oprot.writeI32(self.listenPort)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Group:
  """
  Attributes:
   - name
   - deviceIp
   - groupIp
   - groupport
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'deviceIp', None, None, ), # 2
    (3, TType.STRING, 'groupIp', None, None, ), # 3
    (4, TType.I32, 'groupport', None, None, ), # 4
  )

  def __init__(self, name=None, deviceIp=None, groupIp=None, groupport=None,):
    self.name = name
    self.deviceIp = deviceIp
    self.groupIp = groupIp
    self.groupport = groupport

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.deviceIp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.groupIp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.groupport = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Group')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.deviceIp is not None:
      oprot.writeFieldBegin('deviceIp', TType.STRING, 2)
      oprot.writeString(self.deviceIp)
      oprot.writeFieldEnd()
    if self.groupIp is not None:
      oprot.writeFieldBegin('groupIp', TType.STRING, 3)
      oprot.writeString(self.groupIp)
      oprot.writeFieldEnd()
    if self.groupport is not None:
      oprot.writeFieldBegin('groupport', TType.I32, 4)
      oprot.writeI32(self.groupport)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
