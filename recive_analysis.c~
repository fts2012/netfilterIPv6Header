/*
* this programe is working as plugin of netfilter 
* which analysis the specified packets
*/

#include <linux/netfilter.h>
#include <linux/netfilter_ipv6.h>
#include <linux/netfilter_ipv6/ip6_tables.h>
#include <linux/module.h>
#include <linux/moduleparam.h>
#include <linux/kernel.h>
#include <linux/inet.h>
#include <linux/ip.h>
#include <net/ipv6.h>
#include "common.h"


MODULE_LICENSE("GPL");
MODULE_AUTHOR("Qiu Jin");
MODULE_DESCRIPTION("analysis the specified packets");

//static long int ip4addr = 0;
static int host_type = 0;//see as 
//module_param(ip4addr, long, S_IRUGO);

#define PRINT(fmt,args...) printk("debug, " fmt, ##args)


/* IP6 Hooks */
/* After promisc drops#include <asm/byteorder.h>
, checksum checks. */
#define NF_IP6_PRE_ROUTING  0
/* If the packet is destined for this box. */
#define NF_IP6_LOCAL_IN     1
/* If the packet is destined for another interface. */
#define NF_IP6_FORWARD      2
/* Packets coming from a local process. */
#define NF_IP6_LOCAL_OUT        3
/* Packets about to hit the wire. */
#define NF_IP6_POST_ROUTING 4

/*
* Hook deal with the the ipv6 packets, block specified address
*/
static unsigned int 
ip6_analysis_pkt(unsigned int hooknum,
				struct sk_buff *skb,
				const struct net_device *in,
				const struct net_device *out,
				int (*okfn)(struct sk_buff*))
{
    struct sk_buff *sk = skb;
	struct ipv6hdr *ip6_hdr = ipv6_hdr(skb);//header
	struct ip6_dst_hdr *ip6_dst;

    if(ip6_hdr->version == 6)
    {
        struct in6_addr destip = ip6_hdr->daddr;//destination ip
        //specify the ipv6 address that need block
        if(destip.s6_addr[0] == 0xff && destip.s6_addr[1] == 0x15)
        {
            //if it match the condition then drop it
            if(ip6_hdr->nexthdr == 0x3c)
            {
                	ip6_dst = (struct ip6_dst_hdr *)(skb->data + 40);
                    //write this information into a process
                    PRINT("sequence number:%x",ntohl(ip6_dst->ssn));
                    PRINT("time:%x",ntohl(ip6_dst->ip6d_sec));
                    PRINT("sequence number:%x",ntohl(ip6_dst->ip6d_usec));
                    //drop these packets
                    return NF_ACCEPT;
            }

        }
    }
    
    return NF_ACCEPT;
}


/*Initialize the hook*/
static struct nf_hook_ops nf_in_analysis =
{
	.hook = ip6_analysis_pkt,
	.hooknum = NF_IP6_LOCAL_IN,//SEE IF MULTICAST PASS HERE
	.pf = PF_INET6,
	.priority = NF_IP6_PRI_FIRST,
};

/*Initialize the module*/
static int __init ip6_analysisi_init(void)
{
	int ret;
	ret = nf_register_hook(&nf_in_analysis);
	PRINT("IPV6 address modify module init.\n");
	return 0; //success
}

/*Clear the module*/
static void __exit ip6_analysisi_exit(void)
{
	nf_unregister_hook(&nf_in_analysis);
	PRINT("IPV6 address modify module exit.\n");
}

module_init(ip6_analysisi_init);
module_exit(ip6_analysisi_exit);
